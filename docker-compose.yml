services:
  nginx:
    container_name: nginx
    image: nginx:1.27.2
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
      - /home/ubuntu/certbot/etc:/etc/letsencrypt:ro
      - /home/ubuntu/certbot/lib:/var/lib/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sep-network

  identity:
    container_name: identity
    image: quay.io/keycloak/keycloak:26.0.2
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --features=scripts
      - --import-realm
      - --bootstrap-admin-username=admin
      - --bootstrap-admin-password=PcyTt11
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HTTP_PORT: ${KC_HTTP_PORT:-8080}
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"

    volumes:
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      - ./identity/themes/sep/theme:/opt/keycloak/themes:ro
      - keycloak_data:/var/lib/keycloak/data
    networks:
      - sep-network

  postgres:
    container_name: postgres
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'config_file=/usr/share/postgresql/postgresql.conf.sample' -c 'max_connections=500'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - sep-network

  discovery-service:
    container_name: discovery-service
    build:
      context: .
      dockerfile: Dockerfile
      target: discovery-runtime
    hostname: eureka-server
    ports:
      - "8761:8761"
    networks:
      - sep-network
    depends_on:
      - identity
      - postgres

  identity-service:
    container_name: identity-service
    build:
      context: .
      dockerfile: Dockerfile
      target: identity-runtime
    hostname: identity-service
    ports:
      - "8090:8090"
    environment:
      SPRING_APP_NAME: ${SPRING_APP_NAME}
      JWT_ISSUER_URI: ${JWT_ISSUER_URI}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      SERVER_PORT: ${SERVER_PORT}
      SERVER_CONTEXT_PATH: ${SERVER_CONTEXT_PATH}
      SWAGGER_CLIENT_ID: ${SWAGGER_CLIENT_ID}
      SWAGGER_AUTH_URL: ${SWAGGER_AUTH_URL}
      SWAGGER_TOKEN_URL: ${SWAGGER_TOKEN_URL}
      EUREKA_URL: ${EUREKA_URL}
      KEYCLOAK_BASE_URI: ${KEYCLOAK_BASE_URI}
      KEYCLOAK_TOKEN_URI: ${KEYCLOAK_TOKEN_URI}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_SCOPE: ${KEYCLOAK_SCOPE}
      KEYCLOAK_REDIRECT_URI: ${KEYCLOAK_REDIRECT_URI}
      EMAIL_SECRET: ${EMAIL_SECRET}
      EMAIL_EXPIRATION: ${EMAIL_EXPIRATION}
      KAFKA_USER_VERIFICATION_TOPIC: ${KAFKA_USER_VERIFICATION_TOPIC}
      CLIENT_DOMAIN: ${CLIENT_DOMAIN}
      RATE_LIMITER_MAX_ATTEMPTS: ${RATE_LIMITER_MAX_ATTEMPTS}
      RATE_LIMITER_BLOCK_DURATION: ${RATE_LIMITER_BLOCK_DURATION}
      APP_OAUTH2_REDIRECT_URI: ${APP_OAUTH2_REDIRECT_URI}
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${SPRING_DATA_REDIS_PORT}
    networks:
      - sep-network
    depends_on:
      - identity
      - discovery-service
      - redis

  notification-service:
    container_name: notification-service
    build:
      context: .
      dockerfile: Dockerfile
      target: notification-runtime
    hostname: notification-service
    ports:
      - "${SERVER_PORT_NOTIFICATION:-8082}:8082"
    environment:
      SPRING_APP_NAME: ${SPRING_APP_NAME_NOTIFICATION}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CONSUMER_GROUP_ID: ${KAFKA_CONSUMER_GROUP_ID}
      KAFKA_AUTO_OFFSET_RESET: ${KAFKA_AUTO_OFFSET_RESET}
      SERVER_PORT: ${SERVER_PORT_NOTIFICATION}
      SERVER_CONTEXT_PATH: ${SERVER_CONTEXT_PATH_NOTIFICATION}
      BREVO_URL: ${BREVO_URL}
      BREVO_API_KEY: ${BREVO_API_KEY}
      SWAGGER_CLIENT_ID: ${SWAGGER_CLIENT_ID}
      SWAGGER_AUTH_URL: ${SWAGGER_AUTH_URL}
      SWAGGER_TOKEN_URL: ${SWAGGER_TOKEN_URL}
      EUREKA_URL: ${EUREKA_URL}
      KAFKA_USER_VERIFICATION_TOPIC: ${KAFKA_USER_VERIFICATION_TOPIC}
    networks:
      - sep-network
    depends_on:
      - kafka
      - discovery-service
      - redis

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: Dockerfile
      target: gateway-runtime
    hostname: api-gateway
    ports:
      - "9191:9191"
    environment:
      EUREKA_URL: ${EUREKA_URL}
    networks:
      - sep-network
    depends_on:
      - identity-service
      - notification-service

  kafka:
    image: 'bitnami/kafka:3.7.0'
    container_name: kafka
    hostname: ${KAFKA_SERVICE_HOST}
    ports:
      - "${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: ${KAFKA_CFG_NODE_ID}
      KAFKA_CFG_PROCESS_ROLES: ${KAFKA_CFG_PROCESS_ROLES}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_CFG_ADVERTISED_LISTENERS: ${KAFKA_CFG_ADVERTISED_LISTENERS}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - sep-network


  redis:
    container_name: redis
    image: redis:7.4.1-alpine
    restart: always
    ports:
      - "${SPRING_DATA_REDIS_PORT}:6379"
    environment:
      SPRING_DATA_REDIS_HOST: ${SPRING_DATA_REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${SPRING_DATA_REDIS_PORT}
    volumes:
      - redis:/data
    networks:
      - sep-network

volumes:
  postgres:
    driver: local
  redis:
    driver: local
  keycloak_data:
    driver: local


networks:
  sep-network:
    driver: bridge